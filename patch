diff --git a/panda/plugins/osi_linux/default_profile.cpp b/panda/plugins/osi_linux/default_profile.cpp
index b70a63d5a6..d9056f337c 100644
--- a/panda/plugins/osi_linux/default_profile.cpp
+++ b/panda/plugins/osi_linux/default_profile.cpp
@@ -43,6 +43,11 @@ target_ptr_t default_get_current_task_struct(CPUState *cpu)
         // We need to expose that as a part of the OSI config - See issue #651
         target_ptr_t task_thread_info = kernel_sp & ~(0x2000 -1);
 
+        //for kernel versions >= 5.18.0
+        if (PROFILE_KVER_GE(ki, 5, 18, 0)) {
+            return task_thread_info;
+        }
+
         current_task_addr=task_thread_info+0xC;
 
         //because some kernel versions use both per_cpu variables AND access the task_struct 
@@ -60,6 +65,13 @@ target_ptr_t default_get_current_task_struct(CPUState *cpu)
     current_task_addr = get_id(cpu); // HWID returned by hw_proc_id is the cached r28 value
     OG_printf("Got current task struct at " TARGET_FMT_lx "\n", current_task_addr);
 
+    //because some kernel versions use both per_cpu variables AND access the task_struct 
+    //via the thread_info struct, the default call to struct_get with the per_cpu_offset_0_addr can be incorrect
+    err = struct_get(cpu, &ts, current_task_addr, 0);
+    assert(err == struct_get_ret_t::SUCCESS && "failed to get current task struct");
+    fixupendian2(ts);
+    return ts;
+
 #else // x86/64
     current_task_addr = ki.task.current_task_addr;
 #endif
diff --git a/panda/plugins/osi_linux/utils/kernelinfo/kernelinfo_read.c b/panda/plugins/osi_linux/utils/kernelinfo/kernelinfo_read.c
index f03d7a9ca3..cf3be91c91 100644
--- a/panda/plugins/osi_linux/utils/kernelinfo/kernelinfo_read.c
+++ b/panda/plugins/osi_linux/utils/kernelinfo/kernelinfo_read.c
@@ -145,7 +145,7 @@ int read_kernelinfo(gchar const *file, gchar const *group, struct kernelinfo *ki
 		READ_INFO_INT(ki, fs.f_vfsmnt_offset, gerr, err.fs, &errbmp);
 	}
 
-	READ_INFO_INT(ki, task.thread_group_offset, gerr, err.task, &errbmp);
+	OPTIONAL_READ_INFO_INT(ki, task.thread_group_offset, gerr, err.task, &errbmp);
 	READ_INFO_INT(ki, task.pid_offset, gerr, err.task, &errbmp);
 	READ_INFO_INT(ki, task.tgid_offset, gerr, err.task, &errbmp);
 	READ_INFO_INT(ki, task.mm_offset, gerr, err.task, &errbmp);
@@ -157,7 +157,7 @@ int read_kernelinfo(gchar const *file, gchar const *group, struct kernelinfo *ki
         
 	/* read mm information */
 	READ_INFO_INT(ki, mm.size, gerr, err.mm, &errbmp);
-	READ_INFO_INT(ki, mm.mmap_offset, gerr, err.mm, &errbmp);
+	OPTIONAL_READ_INFO_INT(ki, mm.mmap_offset, gerr, err.mm, &errbmp);
 	READ_INFO_INT(ki, mm.pgd_offset, gerr, err.mm, &errbmp);
 	READ_INFO_INT(ki, mm.arg_start_offset, gerr, err.mm, &errbmp);
 	READ_INFO_INT(ki, mm.start_brk_offset, gerr, err.mm, &errbmp);
@@ -169,7 +169,7 @@ int read_kernelinfo(gchar const *file, gchar const *group, struct kernelinfo *ki
 	READ_INFO_INT(ki, vma.vm_mm_offset, gerr, err.vma, &errbmp);
 	READ_INFO_INT(ki, vma.vm_start_offset, gerr, err.vma, &errbmp);
 	READ_INFO_INT(ki, vma.vm_end_offset, gerr, err.vma, &errbmp);
-	READ_INFO_INT(ki, vma.vm_next_offset, gerr, err.vma, &errbmp);
+	OPTIONAL_READ_INFO_INT(ki, vma.vm_next_offset, gerr, err.vma, &errbmp);
 	READ_INFO_INT(ki, vma.vm_file_offset, gerr, err.vma, &errbmp);
 	READ_INFO_INT(ki, vma.vm_flags_offset, gerr, err.vma, &errbmp);
 
diff --git a/panda/plugins/syscalls2/generated-in/linux_arm_prototypes.txt b/panda/plugins/syscalls2/generated-in/linux_arm_prototypes.txt
index 6558ded5cb..5df72575c2 100644
--- a/panda/plugins/syscalls2/generated-in/linux_arm_prototypes.txt
+++ b/panda/plugins/syscalls2/generated-in/linux_arm_prototypes.txt
@@ -348,6 +348,7 @@
 388 long sys_userfaultfd(int flags);
 389 long sys_membarrier(int cmd, int flags);
 390 long sys_mlock2(unsigned long start, size_t len, int flags);
+397 long sys_statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);
 983041 long ARM_breakpoint(void);
 983042 long ARM_cacheflush(unsigned long start, unsigned long end, unsigned long flags);
 983043 long ARM_user26_mode(void);
diff --git a/panda/plugins/syscalls2/generated/dso_info_linux_arm.c b/panda/plugins/syscalls2/generated/dso_info_linux_arm.c
index 8880a13d31..06702f9a88 100644
--- a/panda/plugins/syscalls2/generated/dso_info_linux_arm.c
+++ b/panda/plugins/syscalls2/generated/dso_info_linux_arm.c
@@ -2,7 +2,7 @@
 #include <stdbool.h>
 #include "../syscalls2_info.h"
 #define MAX_SYSCALL_NO 983045
-#define MAX_SYSCALL_GENERIC_NO 390
+#define MAX_SYSCALL_GENERIC_NO 397
 #define MAX_SYSCALL_ARGS 6
 
 #if !defined(__clang__) && __GNUC__ < 5
@@ -1418,6 +1418,10 @@ static syscall_argtype_t argt_390[] = {SYSCALL_ARG_U32, SYSCALL_ARG_U32, SYSCALL
 static uint8_t argsz_390[] = {sizeof(uint32_t), sizeof(uint32_t), sizeof(int32_t)};
 static const char* const argn_390[] = {"start", "len", "flags", 0};
 static const char* const argtn_390[] = {"n/a", "n/a", "n/a", 0};
+static syscall_argtype_t argt_397[] = {SYSCALL_ARG_S32, SYSCALL_ARG_STR_PTR, SYSCALL_ARG_U32, SYSCALL_ARG_U32, SYSCALL_ARG_STRUCT_PTR};
+static uint8_t argsz_397[] = {sizeof(int32_t), sizeof(uint32_t), sizeof(uint32_t), sizeof(uint32_t), sizeof(uint32_t)};
+static const char* const argn_397[] = {"dfd", "path", "flags", "mask", "buffer", 0};
+static const char* const argtn_397[] = {"n/a", "n/a", "n/a", "n/a", "statx", 0};
 /* skipping non generic system call ARM_breakpoint: [983041] */
 /* skipping non generic system call ARM_cacheflush: [983042] */
 /* skipping non generic system call ARM_user26_mode: [983043] */
@@ -4927,6 +4931,16 @@ syscall_info_t __syscall_info_a[] = {
 		.argtn = argtn_390,
 		.noreturn = false
 	},
+	[397] = {
+		.no = 397,
+		.name = "sys_statx",
+		.nargs = 5,
+		.argt = argt_397,
+		.argsz = argsz_397,
+		.argn = argn_397,
+		.argtn = argtn_397,
+		.noreturn = false
+	},
 	/* skipping non generic system call ARM_breakpoint: [983041] */
 	/* skipping non generic system call ARM_cacheflush: [983042] */
 	/* skipping non generic system call ARM_user26_mode: [983043] */
diff --git a/panda/plugins/syscalls2/generated/syscall_ppp_boilerplate_enter.cpp b/panda/plugins/syscalls2/generated/syscall_ppp_boilerplate_enter.cpp
index 4d36a9d72a..97cd32bc37 100644
--- a/panda/plugins/syscalls2/generated/syscall_ppp_boilerplate_enter.cpp
+++ b/panda/plugins/syscalls2/generated/syscall_ppp_boilerplate_enter.cpp
@@ -309,6 +309,7 @@ PPP_CB_BOILERPLATE(on_sys_splice_enter)
 PPP_CB_BOILERPLATE(on_sys_stat64_enter)
 PPP_CB_BOILERPLATE(on_sys_statfs_enter)
 PPP_CB_BOILERPLATE(on_sys_statfs64_enter)
+PPP_CB_BOILERPLATE(on_sys_statx_enter)
 PPP_CB_BOILERPLATE(on_sys_stime_enter)
 PPP_CB_BOILERPLATE(on_sys_swapoff_enter)
 PPP_CB_BOILERPLATE(on_sys_swapon_enter)
diff --git a/panda/plugins/syscalls2/generated/syscall_ppp_boilerplate_return.cpp b/panda/plugins/syscalls2/generated/syscall_ppp_boilerplate_return.cpp
index f7e003e00b..f440ae7440 100644
--- a/panda/plugins/syscalls2/generated/syscall_ppp_boilerplate_return.cpp
+++ b/panda/plugins/syscalls2/generated/syscall_ppp_boilerplate_return.cpp
@@ -309,6 +309,7 @@ PPP_CB_BOILERPLATE(on_sys_splice_return)
 PPP_CB_BOILERPLATE(on_sys_stat64_return)
 PPP_CB_BOILERPLATE(on_sys_statfs_return)
 PPP_CB_BOILERPLATE(on_sys_statfs64_return)
+PPP_CB_BOILERPLATE(on_sys_statx_return)
 PPP_CB_BOILERPLATE(on_sys_stime_return)
 PPP_CB_BOILERPLATE(on_sys_swapoff_return)
 PPP_CB_BOILERPLATE(on_sys_swapon_return)
diff --git a/panda/plugins/syscalls2/generated/syscall_ppp_extern_enter.h b/panda/plugins/syscalls2/generated/syscall_ppp_extern_enter.h
index 9421588173..90856aae82 100644
--- a/panda/plugins/syscalls2/generated/syscall_ppp_extern_enter.h
+++ b/panda/plugins/syscalls2/generated/syscall_ppp_extern_enter.h
@@ -309,6 +309,7 @@ PPP_CB_EXTERN(on_sys_splice_enter)
 PPP_CB_EXTERN(on_sys_stat64_enter)
 PPP_CB_EXTERN(on_sys_statfs_enter)
 PPP_CB_EXTERN(on_sys_statfs64_enter)
+PPP_CB_EXTERN(on_sys_statx_enter)
 PPP_CB_EXTERN(on_sys_stime_enter)
 PPP_CB_EXTERN(on_sys_swapoff_enter)
 PPP_CB_EXTERN(on_sys_swapon_enter)
diff --git a/panda/plugins/syscalls2/generated/syscall_ppp_extern_return.h b/panda/plugins/syscalls2/generated/syscall_ppp_extern_return.h
index c0cbc1f8bc..2964cf303d 100644
--- a/panda/plugins/syscalls2/generated/syscall_ppp_extern_return.h
+++ b/panda/plugins/syscalls2/generated/syscall_ppp_extern_return.h
@@ -309,6 +309,7 @@ PPP_CB_EXTERN(on_sys_splice_return)
 PPP_CB_EXTERN(on_sys_stat64_return)
 PPP_CB_EXTERN(on_sys_statfs_return)
 PPP_CB_EXTERN(on_sys_statfs64_return)
+PPP_CB_EXTERN(on_sys_statx_return)
 PPP_CB_EXTERN(on_sys_stime_return)
 PPP_CB_EXTERN(on_sys_swapoff_return)
 PPP_CB_EXTERN(on_sys_swapon_return)
diff --git a/panda/plugins/syscalls2/generated/syscall_ppp_register_enter.cpp b/panda/plugins/syscalls2/generated/syscall_ppp_register_enter.cpp
index a390b5c05e..0f68477b43 100644
--- a/panda/plugins/syscalls2/generated/syscall_ppp_register_enter.cpp
+++ b/panda/plugins/syscalls2/generated/syscall_ppp_register_enter.cpp
@@ -309,6 +309,7 @@ PPP_PROT_REG_CB(on_sys_splice_enter)
 PPP_PROT_REG_CB(on_sys_stat64_enter)
 PPP_PROT_REG_CB(on_sys_statfs_enter)
 PPP_PROT_REG_CB(on_sys_statfs64_enter)
+PPP_PROT_REG_CB(on_sys_statx_enter)
 PPP_PROT_REG_CB(on_sys_stime_enter)
 PPP_PROT_REG_CB(on_sys_swapoff_enter)
 PPP_PROT_REG_CB(on_sys_swapon_enter)
diff --git a/panda/plugins/syscalls2/generated/syscall_ppp_register_return.cpp b/panda/plugins/syscalls2/generated/syscall_ppp_register_return.cpp
index bd5cd430e1..66c5a8a365 100644
--- a/panda/plugins/syscalls2/generated/syscall_ppp_register_return.cpp
+++ b/panda/plugins/syscalls2/generated/syscall_ppp_register_return.cpp
@@ -309,6 +309,7 @@ PPP_PROT_REG_CB(on_sys_splice_return)
 PPP_PROT_REG_CB(on_sys_stat64_return)
 PPP_PROT_REG_CB(on_sys_statfs_return)
 PPP_PROT_REG_CB(on_sys_statfs64_return)
+PPP_PROT_REG_CB(on_sys_statx_return)
 PPP_PROT_REG_CB(on_sys_stime_return)
 PPP_PROT_REG_CB(on_sys_swapoff_return)
 PPP_PROT_REG_CB(on_sys_swapon_return)
diff --git a/panda/plugins/syscalls2/generated/syscall_switch_enter_linux_arm.cpp b/panda/plugins/syscalls2/generated/syscall_switch_enter_linux_arm.cpp
index 047ecc86e8..09aca563ca 100644
--- a/panda/plugins/syscalls2/generated/syscall_switch_enter_linux_arm.cpp
+++ b/panda/plugins/syscalls2/generated/syscall_switch_enter_linux_arm.cpp
@@ -5321,6 +5321,26 @@ void syscall_enter_switch_linux_arm(CPUState *cpu, target_ptr_t pc, int static_c
 		}
 		PPP_RUN_CB(on_sys_mlock2_enter, cpu, pc, arg0, arg1, arg2);
 	}; break;
+	// 397 long sys_statx ['int dfd', 'const char __user *path', 'unsigned flags', 'unsigned mask', 'struct statx __user *buffer']
+	case 397: {
+		panda_noreturn = false;
+		ctx.double_return = false;
+		int32_t arg0 = get_s32(cpu, &ctx, 0);
+		uint32_t arg1 = get_32(cpu, &ctx, 1);
+		uint32_t arg2 = get_32(cpu, &ctx, 2);
+		uint32_t arg3 = get_32(cpu, &ctx, 3);
+		uint32_t arg4 = get_32(cpu, &ctx, 4);
+		if (PPP_CHECK_CB(on_all_sys_enter2) ||
+			(!panda_noreturn && (PPP_CHECK_CB(on_all_sys_return2) ||
+					PPP_CHECK_CB(on_sys_statx_return)))) {
+			memcpy(ctx.args[0], &arg0, sizeof(int32_t));
+			memcpy(ctx.args[1], &arg1, sizeof(uint32_t));
+			memcpy(ctx.args[2], &arg2, sizeof(uint32_t));
+			memcpy(ctx.args[3], &arg3, sizeof(uint32_t));
+			memcpy(ctx.args[4], &arg4, sizeof(uint32_t));
+		}
+		PPP_RUN_CB(on_sys_statx_enter, cpu, pc, arg0, arg1, arg2, arg3, arg4);
+	}; break;
 	// 983041 long ARM_breakpoint ['void']
 	case 983041: {
 		panda_noreturn = false;
diff --git a/panda/plugins/syscalls2/generated/syscall_switch_return_linux_arm.cpp b/panda/plugins/syscalls2/generated/syscall_switch_return_linux_arm.cpp
index 3a68fa3f9a..ae5c2eda78 100644
--- a/panda/plugins/syscalls2/generated/syscall_switch_return_linux_arm.cpp
+++ b/panda/plugins/syscalls2/generated/syscall_switch_return_linux_arm.cpp
@@ -3986,6 +3986,22 @@ void syscall_return_switch_linux_arm(CPUState *cpu, target_ptr_t pc, const sysca
 			}
 			PPP_RUN_CB(on_sys_mlock2_return, cpu, pc, arg0, arg1, arg2) ;
 		}; break;
+		// 397 long sys_statx ['int dfd', 'const char __user *path', 'unsigned flags', 'unsigned mask', 'struct statx __user *buffer']
+		case 397: {
+			int32_t arg0 = 0;
+			uint32_t arg1 = 0;
+			uint32_t arg2 = 0;
+			uint32_t arg3 = 0;
+			uint32_t arg4 = 0;
+			if (PPP_CHECK_CB(on_sys_statx_return) || PPP_CHECK_CB(on_all_sys_return2)) {
+				memcpy(&arg0, ctx->args[0], sizeof(int32_t));
+				memcpy(&arg1, ctx->args[1], sizeof(uint32_t));
+				memcpy(&arg2, ctx->args[2], sizeof(uint32_t));
+				memcpy(&arg3, ctx->args[3], sizeof(uint32_t));
+				memcpy(&arg4, ctx->args[4], sizeof(uint32_t));
+			}
+			PPP_RUN_CB(on_sys_statx_return, cpu, pc, arg0, arg1, arg2, arg3, arg4) ;
+		}; break;
 		// 983041 long ARM_breakpoint ['void']
 		case 983041: {
 			if (PPP_CHECK_CB(on_ARM_breakpoint_return) || PPP_CHECK_CB(on_all_sys_return2)) {
diff --git a/panda/plugins/syscalls2/generated/syscalls_args.h b/panda/plugins/syscalls2/generated/syscalls_args.h
index 0f575612cf..8d1dd18cdf 100644
--- a/panda/plugins/syscalls2/generated/syscalls_args.h
+++ b/panda/plugins/syscalls2/generated/syscalls_args.h
@@ -5241,6 +5241,28 @@
 	const int32_t &UNUSED(pref##flags) = *reinterpret_cast<const int32_t *>((ctx)->args[2]);
 #endif
 
+// long sys_statx [['int dfd', 'const char __user *path', 'unsigned flags', 'unsigned mask', 'struct statx __user *buffer']]
+#define locals_LINUX__ARM_sys_statx(ctx, pref) \
+	int32_t UNUSED(pref##dfd) = *(int32_t *)((ctx)->args[0]); \
+	uint32_t UNUSED(pref##path) = *(uint32_t *)((ctx)->args[1]); \
+	uint32_t UNUSED(pref##flags) = *(uint32_t *)((ctx)->args[2]); \
+	uint32_t UNUSED(pref##mask) = *(uint32_t *)((ctx)->args[3]); \
+	uint32_t UNUSED(pref##buffer) = *(uint32_t *)((ctx)->args[4]);
+#if defined(__cplusplus)
+#define references_LINUX__ARM_sys_statx(ctx, pref) \
+	int32_t &UNUSED(pref##dfd) = *reinterpret_cast<int32_t *>((ctx)->args[0]); \
+	uint32_t &UNUSED(pref##path) = *reinterpret_cast<uint32_t *>((ctx)->args[1]); \
+	uint32_t &UNUSED(pref##flags) = *reinterpret_cast<uint32_t *>((ctx)->args[2]); \
+	uint32_t &UNUSED(pref##mask) = *reinterpret_cast<uint32_t *>((ctx)->args[3]); \
+	uint32_t &UNUSED(pref##buffer) = *reinterpret_cast<uint32_t *>((ctx)->args[4]);
+#define creferences_LINUX__ARM_sys_statx(ctx, pref) \
+	const int32_t &UNUSED(pref##dfd) = *reinterpret_cast<const int32_t *>((ctx)->args[0]); \
+	const uint32_t &UNUSED(pref##path) = *reinterpret_cast<const uint32_t *>((ctx)->args[1]); \
+	const uint32_t &UNUSED(pref##flags) = *reinterpret_cast<const uint32_t *>((ctx)->args[2]); \
+	const uint32_t &UNUSED(pref##mask) = *reinterpret_cast<const uint32_t *>((ctx)->args[3]); \
+	const uint32_t &UNUSED(pref##buffer) = *reinterpret_cast<const uint32_t *>((ctx)->args[4]);
+#endif
+
 // long ARM_breakpoint [['void']]
 #undef locals_LINUX__ARM_ARM_breakpoint
 #if defined(__cplusplus)
diff --git a/panda/plugins/syscalls2/generated/syscalls_ext_typedefs_arm.h b/panda/plugins/syscalls2/generated/syscalls_ext_typedefs_arm.h
index f534427d04..7e54d9324b 100644
--- a/panda/plugins/syscalls2/generated/syscalls_ext_typedefs_arm.h
+++ b/panda/plugins/syscalls2/generated/syscalls_ext_typedefs_arm.h
@@ -622,6 +622,8 @@ PPP_CB_TYPEDEF(void, on_sys_statfs_enter, CPUState* cpu, target_ulong pc, uint32
 PPP_CB_TYPEDEF(void, on_sys_statfs_return, CPUState* cpu, target_ulong pc, uint32_t path, uint32_t buf);
 PPP_CB_TYPEDEF(void, on_sys_statfs64_enter, CPUState* cpu, target_ulong pc, uint32_t path, uint32_t sz, uint32_t buf);
 PPP_CB_TYPEDEF(void, on_sys_statfs64_return, CPUState* cpu, target_ulong pc, uint32_t path, uint32_t sz, uint32_t buf);
+PPP_CB_TYPEDEF(void, on_sys_statx_enter, CPUState* cpu, target_ulong pc, int32_t dfd, uint32_t path, uint32_t flags, uint32_t mask, uint32_t buffer);
+PPP_CB_TYPEDEF(void, on_sys_statx_return, CPUState* cpu, target_ulong pc, int32_t dfd, uint32_t path, uint32_t flags, uint32_t mask, uint32_t buffer);
 PPP_CB_TYPEDEF(void, on_sys_stime_enter, CPUState* cpu, target_ulong pc, uint32_t tptr);
 PPP_CB_TYPEDEF(void, on_sys_stime_return, CPUState* cpu, target_ulong pc, uint32_t tptr);
 PPP_CB_TYPEDEF(void, on_sys_swapoff_enter, CPUState* cpu, target_ulong pc, uint32_t specialfile);
diff --git a/panda/plugins/syscalls2/generated/syscalls_numbers.h b/panda/plugins/syscalls2/generated/syscalls_numbers.h
index 9931403943..c098b6beec 100644
--- a/panda/plugins/syscalls2/generated/syscalls_numbers.h
+++ b/panda/plugins/syscalls2/generated/syscalls_numbers.h
@@ -1063,6 +1063,9 @@ namespace syscalls2 {
 			const int sys_mlock2 = 390;
 			
 			
+			const int sys_statx = 397;
+			
+			
 			const int ARM_breakpoint = 983041;
 			
 			
diff --git a/panda/plugins/syscalls2/scripts/prototype_parser_config.py b/panda/plugins/syscalls2/scripts/prototype_parser_config.py
index 28bd367cf9..0d2a3ebe56 100644
--- a/panda/plugins/syscalls2/scripts/prototype_parser_config.py
+++ b/panda/plugins/syscalls2/scripts/prototype_parser_config.py
@@ -46,7 +46,7 @@ import os
 CONFIG_LINUX = {
     'linux:x64:generic': {
         'bits': 64,
-        'src': os.path.expanduser('~/git/ubuntu-bionic'),
+        'src': os.path.expanduser('~/code/linux'),
         'map_function_signature': {
             'parser': 'parse_signature_files',
             'locations': {
@@ -62,7 +62,7 @@ CONFIG_LINUX = {
     },
     'linux:x86:ubuntu': {
         'bits': 32,
-        'src': os.path.expanduser('~/git/ubuntu-bionic'),
+        'src': os.path.expanduser('~/code/linux'),
         'map_function_signature': {
             'parser': 'parse_signature_files',
             'locations': {
@@ -78,7 +78,7 @@ CONFIG_LINUX = {
     },
     'linux:arm:ubuntu': {
         'bits': 32,
-        'src': os.path.expanduser('~/git/ubuntu-bionic'),
+        'src': os.path.expanduser('~/code/linux'),
         'extrasigs': 'linux_arm_extrasigs.json',
         'map_function_signature': {
             'parser': 'parse_signature_files',
@@ -89,23 +89,13 @@ CONFIG_LINUX = {
             'normalize': True,
         },
         'map_function_number': {
-            'parser': 'parse_numbers_calltable',
-            'source': 'arch/arm/kernel/calls.S',
-            'regex': {
-                'callnr': r'^/\*\s*(?P<nr>\d+)\s*\*/',
-                'call': r'CALL\((?P<obsolete>OBSOLETE\()?(?P<abi>ABI\()?(?P<syscall>\w+)',
-            },
-            'syscalls_skip': ['sys_ni_syscall',],
-        },
-        'map_name_number': {
-            'parser': 'parse_numbers_unistd',
-            'source': 'arch/arm/include/uapi/asm/unistd.h',
-            'cpp_flags': ['-D__ARM_EABI__', '-D__KERNEL__',],
+            'parser': 'parse_numbers_tbl',
+            'source': 'arch/arm/tools/syscall.tbl',
         },
     },
     'linux:arm64:ubuntu': {
         'bits': 64,
-        'src': os.path.expanduser('~/git/ubuntu-bionic'),
+        'src': os.path.expanduser('~/code/linux'),
         #'extrasigs': 'linux_arm_extrasigs.json', # ???
         'map_function_signature': {
             'parser': 'parse_signature_files',
@@ -139,7 +129,7 @@ CONFIG_LINUX = {
     # Generate using stock linux kernel at v5.8
     'linux:mips:generic': {
         'bits': 32,
-        'src': os.path.expanduser('~/git/linux'),
+        'src': os.path.expanduser('~/code/linux'),
         'map_function_signature': {
             'parser': 'parse_signature_files',
             'locations': {
@@ -159,7 +149,7 @@ CONFIG_LINUX = {
     # to merge the 2.6 and 5.8 prototypes so it should work on both and everything between
     'linux:mips26:generic': {
         'bits': 32,
-        'src': os.path.expanduser('~/git/linux'), # XXX: If you change this be sure to change below
+        'src': os.path.expanduser('~/code/linux'), # XXX: If you change this be sure to change below
         'map_function_signature': {
             'parser': 'parse_signature_files',
             'locations': {
@@ -180,13 +170,13 @@ CONFIG_LINUX = {
         'map_name_number': {
             'parser': 'parse_numbers_unistd',
             'source': 'arch/mips/include/asm/unistd.h',
-            'cpp_flags': ['-D_MIPS_SIM=1', '-I'+os.path.expanduser("~/git/linux")+'/arch/mips/include'],
+            'cpp_flags': ['-D_MIPS_SIM=1', '-I'+os.path.expanduser("~/code/linux")+'/arch/mips/include'],
         },
     },
     # Generated with stock linux 5.8
     'linux:mips64:generic': {
         'bits': 64,
-        'src': os.path.expanduser('~/git/linux'),
+        'src': os.path.expanduser('~/code/linux'),
         'map_function_signature': {
             'parser': 'parse_signature_files',
             'locations': {
diff --git a/panda/python/core/create_panda_datatypes.py b/panda/python/core/create_panda_datatypes.py
index 98657007c2..4ee2eaa4e1 100755
--- a/panda/python/core/create_panda_datatypes.py
+++ b/panda/python/core/create_panda_datatypes.py
@@ -37,7 +37,7 @@ INCLUDE_DIR_PYP = os.path.abspath(os.path.join(*[os.path.dirname(__file__), "pan
 INCLUDE_DIR_PAN = os.path.abspath(os.path.join(*[os.path.dirname(__file__), "..", "..", "include", "panda"])) # panda-git/panda/include/panda
 INCLUDE_DIR_CORE = os.path.abspath(os.path.join(*[os.path.dirname(__file__), "..", "..", "..", "include"]))   # panda-git/include
 
-GLOBAL_MAX_SYSCALL_ARG_SIZE = 64
+GLOBAL_MAX_SYSCALL_ARG_SIZE = 8
 GLOBAL_MAX_SYSCALL_ARGS = 17
 
 
