name: Test Container

on:
  pull_request:
    branches:
      - main
env:
  SCRATCH: /home/runner/_shared

jobs:
  lint:
    runs-on: rehosting-arc
    steps:
    - uses: actions/checkout@v4
      if: github.event_name == 'pull_request'
    - name: Set up Python
      if: github.event_name == 'pull_request'
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      if: github.event_name == 'pull_request'
      run: pip install flake8 lintly markupsafe==2.0.1
    - name: Lint with flake8
      if: github.event_name == 'pull_request'
      run: |
        set -o pipefail
        (flake8 | lintly) 2>lintly.err || {
          if grep -q 'diff exceeded the maximum number of lines' lintly.err; then
            echo "Bypassing lint failure due to large diff."
            exit 0
          else
            cat lintly.err
            exit 1
          fi
        }
      env:
        LINTLY_API_KEY: ${{ secrets.GITHUB_TOKEN }}

  build_container:
    runs-on: rehosting-arc
    permissions:
      contents: write
      packages: write
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Archive checked out code to scratch
        run: tar czf "$SCRATCH/penguin-src-${{ github.sha }}.tar.gz" -C "$GITHUB_WORKSPACE" .
      - name: Trust Harbor's self-signed certificate
        run: |
          echo "Fetching certificate from ${{ secrets.REHOSTING_ARC_REGISTRY }}"
          openssl s_client -showcerts -connect ${{ secrets.REHOSTING_ARC_REGISTRY }}:443 < /dev/null 2>/dev/null | openssl x509 -outform PEM | sudo tee /usr/local/share/ca-certificates/harbor.crt > /dev/null
          sudo update-ca-certificates
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host
          buildkitd-config-inline: |
            [registry."${{ secrets.REHOSTING_ARC_REGISTRY }}"]
              insecure = true
              http = true
      
      - name: Log in to Rehosting Arc Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REHOSTING_ARC_REGISTRY }}
          username: ${{ secrets.REHOSTING_ARC_REGISTRY_USER }}
          password: ${{ secrets.REHOSTING_ARC_REGISTRY_PASSWORD }}
      
      - name: Build Docker image and push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: rehosting/penguin:${{ github.sha }}
          build-args: |
            REGISTRY=${{ secrets.REHOSTING_ARC_REGISTRY }}/proxy
          cache-from: |
            type=registry,ref=${{secrets.REHOSTING_ARC_REGISTRY}}/rehosting/penguin:cache,mode=max
            type=registry,ref=${{secrets.REHOSTING_ARC_REGISTRY}}/rehosting/penguin:cache-PR-${{github.event.number}},mode=max
            type=registry,ref=${{secrets.REHOSTING_ARC_REGISTRY}}/rehosting/penguin:cache_last_published,mode=max
          cache-to: |
            type=registry,ref=${{secrets.REHOSTING_ARC_REGISTRY}}/rehosting/penguin:cache,mode=max
            type=registry,ref=${{secrets.REHOSTING_ARC_REGISTRY}}/rehosting/penguin:cache-PR-${{ github.event.number }}
          outputs:
            type=docker,dest=${{env.SCRATCH}}/penguin-image-${{ github.sha }}.tar
      - name: Compress docker image tarball
        run: gzip -f "${SCRATCH}/penguin-image-${{ github.sha }}.tar"

  run_tests:
    needs: build_container
    runs-on: rehosting-arc
    strategy:
      fail-fast: false
      matrix:
        kernel: ["6.13"]
        arch: ["armel", "mipsel", "mipseb", "mips64el", "mips64eb", "powerpc64", "riscv64", "loongarch64", "aarch64", "x86_64"]

    steps:
      - name: Extract code from scratch to workspace
        run: |
          mkdir -p "$GITHUB_WORKSPACE"
          tar xzf "$SCRATCH/penguin-src-${{ github.sha }}.tar.gz" -C "$GITHUB_WORKSPACE"
      - name: Install dependencies and label git workspace safe
        run: |
          sudo apt-get update && sudo apt-get -y install pigz
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        if: github.event_name == 'pull_request'
        run: pip install click pyyaml
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Trust Harbor's self-signed certificate
        run: |
          if [ ! -f "$SCRATCH/penguin-image-${{ github.sha }}.tar.gz" ]; then
            echo "Image tarball not found. Aborting tests.";
            exit 1;
          fi
      - name: Load Docker image from tarball
        run: pigz -dc "$SCRATCH/penguin-image-${{ github.sha }}.tar.gz" | docker load
      - name: Tag loaded image as latest
        run: |
          IMAGE_ID=$(docker images --format '{{.ID}}' rehosting/penguin | head -n1)
          if [ -n "$IMAGE_ID" ]; then
            docker tag $IMAGE_ID rehosting/penguin:latest
          fi
      
      - name: Basic test for ${{ matrix.arch }}
        run: timeout 10m python3 $GITHUB_WORKSPACE/tests/unit_tests/basic_target/test.py --arch ${{ matrix.arch }}
          
      - name: Test for ${{ matrix.arch }} kernel v${{ matrix.kernel }}
        run: timeout 10m python3 $GITHUB_WORKSPACE/tests/unit_tests/test_target/test.py --kernel ${{ matrix.kernel }} --arch ${{ matrix.arch }}
      
      - name: Find the results
        id: results
          
        run: |
          verifier=$(realpath $GITHUB_WORKSPACE/tests/unit_tests/test_target/results/latest/verifier.xml)
          echo "Found verifier xml at $verifier"
          echo "output_verifier=${verifier}" >> "$GITHUB_OUTPUT"
      
      - name: Test Report
        uses: dorny/test-reporter@v1.9.1
        if: success() || failure()
        with: 
          name: ${{ matrix.arch }}-test-results
          path: ${{ steps.results.outputs.output_verifier}} 
          reporter: java-junit

      - name: Get artifact path
        id: artifact
        if: failure()
        run: |
          artifact_path=$(realpath $GITHUB_WORKSPACE/tests/unit_tests/test_target/results/latest/)
          echo "artifact_path=${artifact_path}/*" >> "$GITHUB_OUTPUT" 
      
      - name: Debug info
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}-artifacts
          path: ${{ steps.artifact.outputs.artifact_path }}

  cleanup:
    needs: [run_tests]
    runs-on: rehosting-arc
    if: success()
    steps:
      - name: Remove build output tarball
        run: rm -f "$SCRATCH/penguin-image-${{ github.sha }}.tar.gz"

